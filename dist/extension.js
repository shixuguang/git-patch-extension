(()=>{"use strict";var e={23:e=>{e.exports=require("util")},317:e=>{e.exports=require("child_process")},398:e=>{e.exports=require("vscode")},896:e=>{e.exports=require("fs")},928:e=>{e.exports=require("path")}},t={};function i(n){var s=t[n];if(void 0!==s)return s.exports;var o=t[n]={exports:{}};return e[n](o,o.exports,i),o.exports}var n={};(()=>{var e=n;Object.defineProperty(e,"__esModule",{value:!0}),e.deactivate=e.activate=void 0;const t=i(398),s=i(896),o=i(928),r=i(317),a=(0,i(23).promisify)(r.exec);function c(e,t){let i=e.split("\n");const n=[...t.hunks].sort(((e,t)=>t.startLine-e.startLine));for(const e of n){const{startLine:t,content:n}=e,s=n.split("\n"),o=s.filter((e=>!e.startsWith("-")&&!e.startsWith("\\"))).map((e=>e.startsWith("+")?e.substring(1):e)),r=i.slice(0,t-1),a=i.slice(t-1+s.filter((e=>!e.startsWith("+"))).length);i=[...r,...o,...a]}return i.join("\n")}e.activate=function(e){console.log("Git Patch Extension is now active");let i=t.commands.registerCommand("git-patch.applyPatch",(async()=>{try{const e=await t.window.showOpenDialog({canSelectFiles:!0,canSelectFolders:!1,canSelectMany:!1,filters:{"Patch Files":["patch","diff"]},title:"Select Git Patch File"});if(!e||0===e.length)return;const i=e[0].fsPath,n=t.workspace.workspaceFolders;if(!n)return void t.window.showErrorMessage("No workspace folder is open");const r=n[0].uri.fsPath,a=function(e){const t=[],i=e.split("diff --git");for(let e=1;e<i.length;e++){const n=i[e].split("\n");let s=n[0].match(/a\/(.*) b\/(.*)/);if(!s&&(s=n[0].match(/\"(.*)\" \"(.*)\"/),!s))continue;s[1];const o=s[2];let r="file",a=!1,c=!1;for(let e=1;e<Math.min(n.length,10);e++){const t=n[e];if(t.includes("new file mode")&&(a=!0),t.includes("deleted file mode")&&(c=!0),t.includes("Binary files")){r="binary";break}if(t.includes("old mode")&&t.includes("new mode")&&(t.includes("040000")||t.includes("160000"))){r="directory";break}}if("directory"===r){t.push({filePath:o,fileType:r,isNew:a,isDeleted:c,hunks:[]});continue}if("binary"===r){t.push({filePath:o,fileType:r,isNew:a,isDeleted:c,hunks:[]});continue}const l=[];let f=!1,d={startLine:0,lineCount:0,content:""},h=null;for(let e=1;e<n.length;e++){const t=n[e];t.startsWith("@@")?(f&&l.push({...d}),h=t.match(/@@ -(\d+)(?:,(\d+))? \+(\d+)(?:,(\d+))? @@/),h&&(f=!0,d={startLine:parseInt(h[3],10),lineCount:h[4]?parseInt(h[4],10):1,content:""})):f&&(d.content+=t+"\n")}f&&l.push({...d}),t.push({filePath:o,fileType:r,isNew:a,isDeleted:c,hunks:l})}return t}(s.readFileSync(i,"utf8"));for(const e of a){const i=o.join(r,e.filePath);if("directory"===e.fileType){t.window.showInformationMessage(`Skipping directory: ${e.filePath}`);continue}if("binary"===e.fileType){t.window.showInformationMessage(`Skipping binary file: ${e.filePath} (not supported in this version)`);continue}const n=s.existsSync(i);if(e.isDeleted){n&&"Yes"===await t.window.showInformationMessage(`Delete file ${e.filePath}?`,"Yes","No")&&(s.unlinkSync(i),t.window.showInformationMessage(`Deleted ${e.filePath}`));continue}const a=o.join(r,`.temp_${o.basename(e.filePath)}`);if(n&&s.statSync(i).isDirectory()){t.window.showWarningMessage(`Skipping ${e.filePath} because it is a directory`);continue}let l="";if(n)try{l=s.readFileSync(i,"utf8")}catch(i){t.window.showErrorMessage(`Error reading ${e.filePath}: ${i instanceof Error?i.message:String(i)}`);continue}const f=c(l,e),d=o.dirname(a);s.existsSync(d)||s.mkdirSync(d,{recursive:!0});try{s.writeFileSync(a,f)}catch(i){t.window.showErrorMessage(`Error creating temp file for ${e.filePath}: ${i instanceof Error?i.message:String(i)}`);continue}const h=n?t.Uri.file(i):t.Uri.file(a).with({scheme:"untitled"}),p=t.Uri.file(a),w=`${e.filePath} (Git Patch Preview)`;try{await t.commands.executeCommand("vscode.diff",h,p,w)}catch(i){t.window.showErrorMessage(`Error showing diff for ${e.filePath}: ${i instanceof Error?i.message:String(i)}`);continue}if("Yes"===await t.window.showInformationMessage(`Apply changes to ${e.filePath}?`,"Yes","No"))try{const n=o.dirname(i);s.existsSync(n)||s.mkdirSync(n,{recursive:!0}),s.writeFileSync(i,f),t.window.showInformationMessage(`Changes applied to ${e.filePath}`)}catch(i){t.window.showErrorMessage(`Error applying changes to ${e.filePath}: ${i instanceof Error?i.message:String(i)}`)}try{s.existsSync(a)&&s.unlinkSync(a)}catch(e){console.log(`Error cleaning up temp file: ${e instanceof Error?e.message:String(e)}`)}}}catch(e){t.window.showErrorMessage(`Error applying patch: ${e instanceof Error?e.message:String(e)}`)}}));e.subscriptions.push(i);let n=t.commands.registerCommand("git-patch.applyPatchWithGit",(async()=>{try{const e=await t.window.showOpenDialog({canSelectFiles:!0,canSelectFolders:!1,canSelectMany:!1,filters:{"Patch Files":["patch","diff"]},title:"Select Git Patch File"});if(!e||0===e.length)return;const i=e[0].fsPath,n=t.workspace.workspaceFolders;if(!n)return void t.window.showErrorMessage("No workspace folder is open");const r=n[0].uri.fsPath;await a(`git apply --check "${i}"`,{cwd:r});const{stdout:c}=await a(`git apply --numstat "${i}"`,{cwd:r}),l=c.split("\n").filter((e=>""!==e.trim())).map((e=>e.split("\t")[2]));if("Yes"!==await t.window.showInformationMessage(`Apply patch to ${l.length} file(s)?\n${l.join(", ")}`,"Yes","No"))return;const f=o.join(r,".git","temp-index");await a(`git apply --cached --index="${f}" "${i}"`,{cwd:r});for(const e of l){const i=o.join(r,e),{stdout:n}=await a(`git diff --no-index -- "${i}" "${i}"`,{cwd:r,env:{...process.env,GIT_INDEX_FILE:f}}),c=o.join(r,`.temp_${o.basename(e)}`);await a(`git show ":${e}" > "${c}"`,{cwd:r,env:{...process.env,GIT_INDEX_FILE:f}}),await t.commands.executeCommand("vscode.diff",t.Uri.file(i),t.Uri.file(c),`${e} (Git Patch Preview)`),s.existsSync(c)&&s.unlinkSync(c)}await a(`git apply "${i}"`,{cwd:r}),t.window.showInformationMessage("Patch applied successfully")}catch(e){t.window.showErrorMessage(`Error applying patch: ${e instanceof Error?e.message:String(e)}`)}}));e.subscriptions.push(n)},e.deactivate=function(){}})(),module.exports=n})();
//# sourceMappingURL=extension.js.map